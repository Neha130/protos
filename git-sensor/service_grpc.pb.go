// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.12
// source: git-sensor/service.proto

package git_sensor

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// GitServiceClient is the client API for GitService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GitServiceClient interface {
	// Saves Git credentials
	SaveGitProvider(ctx context.Context, in *GitProviderExchange, opts ...grpc.CallOption) (*GitProviderExchange, error)
	// Add Repo
	AddRepo(ctx context.Context, in *AddRepoExchange, opts ...grpc.CallOption) (*AddRepoExchange, error)
	// Update Repo
	UpdateRepo(ctx context.Context, in *GitMaterial, opts ...grpc.CallOption) (*GitMaterial, error)
	// Save CI pipeline material
	SavePipelineMaterial(ctx context.Context, in *SavePipelineMaterialExchange, opts ...grpc.CallOption) (*SavePipelineMaterialExchange, error)
	// Fetch SCM changes
	FetchChanges(ctx context.Context, in *FetchScmChangesRequest, opts ...grpc.CallOption) (*MaterialChangeResponse, error)
	// Get Head for pipeline materials
	GetHeadForPipelineMaterials(ctx context.Context, in *HeadRequest, opts ...grpc.CallOption) (*GetHeadForPipelineMaterialsResponse, error)
	// Get commit metadata
	GetCommitMetadata(ctx context.Context, in *CommitMetadataRequest, opts ...grpc.CallOption) (*GitCommit, error)
	// Get commit metadata for pipeline material
	GetCommitMetadataForPipelineMaterial(ctx context.Context, in *CommitMetadataRequest, opts ...grpc.CallOption) (*GitCommit, error)
	// Get commit info for Tag
	GetCommitInfoForTag(ctx context.Context, in *CommitMetadataRequest, opts ...grpc.CallOption) (*GitCommit, error)
	// Refresh git material
	RefreshGitMaterial(ctx context.Context, in *RefreshGitMaterialRequest, opts ...grpc.CallOption) (*RefreshGitMaterialResponse, error)
	// Reload all material
	ReloadAllMaterial(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Empty, error)
	// Reload a specific material
	ReloadMaterial(ctx context.Context, in *ReloadMaterialRequest, opts ...grpc.CallOption) (*GenericResponse, error)
	// Get changes in release
	GetChangesInRelease(ctx context.Context, in *ReleaseChangeRequest, opts ...grpc.CallOption) (*GitChanges, error)
	// Get webhook data
	GetWebhookData(ctx context.Context, in *WebhookDataRequest, opts ...grpc.CallOption) (*WebhookAndCiData, error)
	// Get all webhook event config for host
	GetAllWebhookEventConfigForHost(ctx context.Context, in *WebhookEventConfigRequest, opts ...grpc.CallOption) (*WebhookEventConfigResponse, error)
	// Get webhook event config
	GetWebhookEventConfig(ctx context.Context, in *WebhookEventConfigRequest, opts ...grpc.CallOption) (*WebhookEventConfig, error)
	// Get webhook payload data by pipeline material id
	GetWebhookPayloadDataForPipelineMaterialId(ctx context.Context, in *WebhookPayloadDataRequest, opts ...grpc.CallOption) (*WebhookPayloadDataResponse, error)
	// Get webhook payload data by pipeline material id with filter
	GetWebhookPayloadFilterDataForPipelineMaterialId(ctx context.Context, in *WebhookPayloadFilterDataRequest, opts ...grpc.CallOption) (*WebhookPayloadFilterDataResponse, error)
}

type gitServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewGitServiceClient(cc grpc.ClientConnInterface) GitServiceClient {
	return &gitServiceClient{cc}
}

func (c *gitServiceClient) SaveGitProvider(ctx context.Context, in *GitProviderExchange, opts ...grpc.CallOption) (*GitProviderExchange, error) {
	out := new(GitProviderExchange)
	err := c.cc.Invoke(ctx, "/git_service.GitService/SaveGitProvider", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gitServiceClient) AddRepo(ctx context.Context, in *AddRepoExchange, opts ...grpc.CallOption) (*AddRepoExchange, error) {
	out := new(AddRepoExchange)
	err := c.cc.Invoke(ctx, "/git_service.GitService/AddRepo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gitServiceClient) UpdateRepo(ctx context.Context, in *GitMaterial, opts ...grpc.CallOption) (*GitMaterial, error) {
	out := new(GitMaterial)
	err := c.cc.Invoke(ctx, "/git_service.GitService/UpdateRepo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gitServiceClient) SavePipelineMaterial(ctx context.Context, in *SavePipelineMaterialExchange, opts ...grpc.CallOption) (*SavePipelineMaterialExchange, error) {
	out := new(SavePipelineMaterialExchange)
	err := c.cc.Invoke(ctx, "/git_service.GitService/SavePipelineMaterial", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gitServiceClient) FetchChanges(ctx context.Context, in *FetchScmChangesRequest, opts ...grpc.CallOption) (*MaterialChangeResponse, error) {
	out := new(MaterialChangeResponse)
	err := c.cc.Invoke(ctx, "/git_service.GitService/FetchChanges", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gitServiceClient) GetHeadForPipelineMaterials(ctx context.Context, in *HeadRequest, opts ...grpc.CallOption) (*GetHeadForPipelineMaterialsResponse, error) {
	out := new(GetHeadForPipelineMaterialsResponse)
	err := c.cc.Invoke(ctx, "/git_service.GitService/GetHeadForPipelineMaterials", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gitServiceClient) GetCommitMetadata(ctx context.Context, in *CommitMetadataRequest, opts ...grpc.CallOption) (*GitCommit, error) {
	out := new(GitCommit)
	err := c.cc.Invoke(ctx, "/git_service.GitService/GetCommitMetadata", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gitServiceClient) GetCommitMetadataForPipelineMaterial(ctx context.Context, in *CommitMetadataRequest, opts ...grpc.CallOption) (*GitCommit, error) {
	out := new(GitCommit)
	err := c.cc.Invoke(ctx, "/git_service.GitService/GetCommitMetadataForPipelineMaterial", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gitServiceClient) GetCommitInfoForTag(ctx context.Context, in *CommitMetadataRequest, opts ...grpc.CallOption) (*GitCommit, error) {
	out := new(GitCommit)
	err := c.cc.Invoke(ctx, "/git_service.GitService/GetCommitInfoForTag", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gitServiceClient) RefreshGitMaterial(ctx context.Context, in *RefreshGitMaterialRequest, opts ...grpc.CallOption) (*RefreshGitMaterialResponse, error) {
	out := new(RefreshGitMaterialResponse)
	err := c.cc.Invoke(ctx, "/git_service.GitService/RefreshGitMaterial", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gitServiceClient) ReloadAllMaterial(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/git_service.GitService/ReloadAllMaterial", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gitServiceClient) ReloadMaterial(ctx context.Context, in *ReloadMaterialRequest, opts ...grpc.CallOption) (*GenericResponse, error) {
	out := new(GenericResponse)
	err := c.cc.Invoke(ctx, "/git_service.GitService/ReloadMaterial", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gitServiceClient) GetChangesInRelease(ctx context.Context, in *ReleaseChangeRequest, opts ...grpc.CallOption) (*GitChanges, error) {
	out := new(GitChanges)
	err := c.cc.Invoke(ctx, "/git_service.GitService/GetChangesInRelease", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gitServiceClient) GetWebhookData(ctx context.Context, in *WebhookDataRequest, opts ...grpc.CallOption) (*WebhookAndCiData, error) {
	out := new(WebhookAndCiData)
	err := c.cc.Invoke(ctx, "/git_service.GitService/GetWebhookData", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gitServiceClient) GetAllWebhookEventConfigForHost(ctx context.Context, in *WebhookEventConfigRequest, opts ...grpc.CallOption) (*WebhookEventConfigResponse, error) {
	out := new(WebhookEventConfigResponse)
	err := c.cc.Invoke(ctx, "/git_service.GitService/GetAllWebhookEventConfigForHost", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gitServiceClient) GetWebhookEventConfig(ctx context.Context, in *WebhookEventConfigRequest, opts ...grpc.CallOption) (*WebhookEventConfig, error) {
	out := new(WebhookEventConfig)
	err := c.cc.Invoke(ctx, "/git_service.GitService/GetWebhookEventConfig", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gitServiceClient) GetWebhookPayloadDataForPipelineMaterialId(ctx context.Context, in *WebhookPayloadDataRequest, opts ...grpc.CallOption) (*WebhookPayloadDataResponse, error) {
	out := new(WebhookPayloadDataResponse)
	err := c.cc.Invoke(ctx, "/git_service.GitService/GetWebhookPayloadDataForPipelineMaterialId", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gitServiceClient) GetWebhookPayloadFilterDataForPipelineMaterialId(ctx context.Context, in *WebhookPayloadFilterDataRequest, opts ...grpc.CallOption) (*WebhookPayloadFilterDataResponse, error) {
	out := new(WebhookPayloadFilterDataResponse)
	err := c.cc.Invoke(ctx, "/git_service.GitService/GetWebhookPayloadFilterDataForPipelineMaterialId", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GitServiceServer is the server API for GitService service.
// All implementations must embed UnimplementedGitServiceServer
// for forward compatibility
type GitServiceServer interface {
	// Saves Git credentials
	SaveGitProvider(context.Context, *GitProviderExchange) (*GitProviderExchange, error)
	// Add Repo
	AddRepo(context.Context, *AddRepoExchange) (*AddRepoExchange, error)
	// Update Repo
	UpdateRepo(context.Context, *GitMaterial) (*GitMaterial, error)
	// Save CI pipeline material
	SavePipelineMaterial(context.Context, *SavePipelineMaterialExchange) (*SavePipelineMaterialExchange, error)
	// Fetch SCM changes
	FetchChanges(context.Context, *FetchScmChangesRequest) (*MaterialChangeResponse, error)
	// Get Head for pipeline materials
	GetHeadForPipelineMaterials(context.Context, *HeadRequest) (*GetHeadForPipelineMaterialsResponse, error)
	// Get commit metadata
	GetCommitMetadata(context.Context, *CommitMetadataRequest) (*GitCommit, error)
	// Get commit metadata for pipeline material
	GetCommitMetadataForPipelineMaterial(context.Context, *CommitMetadataRequest) (*GitCommit, error)
	// Get commit info for Tag
	GetCommitInfoForTag(context.Context, *CommitMetadataRequest) (*GitCommit, error)
	// Refresh git material
	RefreshGitMaterial(context.Context, *RefreshGitMaterialRequest) (*RefreshGitMaterialResponse, error)
	// Reload all material
	ReloadAllMaterial(context.Context, *Empty) (*Empty, error)
	// Reload a specific material
	ReloadMaterial(context.Context, *ReloadMaterialRequest) (*GenericResponse, error)
	// Get changes in release
	GetChangesInRelease(context.Context, *ReleaseChangeRequest) (*GitChanges, error)
	// Get webhook data
	GetWebhookData(context.Context, *WebhookDataRequest) (*WebhookAndCiData, error)
	// Get all webhook event config for host
	GetAllWebhookEventConfigForHost(context.Context, *WebhookEventConfigRequest) (*WebhookEventConfigResponse, error)
	// Get webhook event config
	GetWebhookEventConfig(context.Context, *WebhookEventConfigRequest) (*WebhookEventConfig, error)
	// Get webhook payload data by pipeline material id
	GetWebhookPayloadDataForPipelineMaterialId(context.Context, *WebhookPayloadDataRequest) (*WebhookPayloadDataResponse, error)
	// Get webhook payload data by pipeline material id with filter
	GetWebhookPayloadFilterDataForPipelineMaterialId(context.Context, *WebhookPayloadFilterDataRequest) (*WebhookPayloadFilterDataResponse, error)
	mustEmbedUnimplementedGitServiceServer()
}

// UnimplementedGitServiceServer must be embedded to have forward compatible implementations.
type UnimplementedGitServiceServer struct {
}

func (UnimplementedGitServiceServer) SaveGitProvider(context.Context, *GitProviderExchange) (*GitProviderExchange, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SaveGitProvider not implemented")
}
func (UnimplementedGitServiceServer) AddRepo(context.Context, *AddRepoExchange) (*AddRepoExchange, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddRepo not implemented")
}
func (UnimplementedGitServiceServer) UpdateRepo(context.Context, *GitMaterial) (*GitMaterial, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateRepo not implemented")
}
func (UnimplementedGitServiceServer) SavePipelineMaterial(context.Context, *SavePipelineMaterialExchange) (*SavePipelineMaterialExchange, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SavePipelineMaterial not implemented")
}
func (UnimplementedGitServiceServer) FetchChanges(context.Context, *FetchScmChangesRequest) (*MaterialChangeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FetchChanges not implemented")
}
func (UnimplementedGitServiceServer) GetHeadForPipelineMaterials(context.Context, *HeadRequest) (*GetHeadForPipelineMaterialsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetHeadForPipelineMaterials not implemented")
}
func (UnimplementedGitServiceServer) GetCommitMetadata(context.Context, *CommitMetadataRequest) (*GitCommit, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCommitMetadata not implemented")
}
func (UnimplementedGitServiceServer) GetCommitMetadataForPipelineMaterial(context.Context, *CommitMetadataRequest) (*GitCommit, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCommitMetadataForPipelineMaterial not implemented")
}
func (UnimplementedGitServiceServer) GetCommitInfoForTag(context.Context, *CommitMetadataRequest) (*GitCommit, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCommitInfoForTag not implemented")
}
func (UnimplementedGitServiceServer) RefreshGitMaterial(context.Context, *RefreshGitMaterialRequest) (*RefreshGitMaterialResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RefreshGitMaterial not implemented")
}
func (UnimplementedGitServiceServer) ReloadAllMaterial(context.Context, *Empty) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReloadAllMaterial not implemented")
}
func (UnimplementedGitServiceServer) ReloadMaterial(context.Context, *ReloadMaterialRequest) (*GenericResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReloadMaterial not implemented")
}
func (UnimplementedGitServiceServer) GetChangesInRelease(context.Context, *ReleaseChangeRequest) (*GitChanges, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetChangesInRelease not implemented")
}
func (UnimplementedGitServiceServer) GetWebhookData(context.Context, *WebhookDataRequest) (*WebhookAndCiData, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetWebhookData not implemented")
}
func (UnimplementedGitServiceServer) GetAllWebhookEventConfigForHost(context.Context, *WebhookEventConfigRequest) (*WebhookEventConfigResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllWebhookEventConfigForHost not implemented")
}
func (UnimplementedGitServiceServer) GetWebhookEventConfig(context.Context, *WebhookEventConfigRequest) (*WebhookEventConfig, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetWebhookEventConfig not implemented")
}
func (UnimplementedGitServiceServer) GetWebhookPayloadDataForPipelineMaterialId(context.Context, *WebhookPayloadDataRequest) (*WebhookPayloadDataResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetWebhookPayloadDataForPipelineMaterialId not implemented")
}
func (UnimplementedGitServiceServer) GetWebhookPayloadFilterDataForPipelineMaterialId(context.Context, *WebhookPayloadFilterDataRequest) (*WebhookPayloadFilterDataResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetWebhookPayloadFilterDataForPipelineMaterialId not implemented")
}
func (UnimplementedGitServiceServer) mustEmbedUnimplementedGitServiceServer() {}

// UnsafeGitServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GitServiceServer will
// result in compilation errors.
type UnsafeGitServiceServer interface {
	mustEmbedUnimplementedGitServiceServer()
}

func RegisterGitServiceServer(s grpc.ServiceRegistrar, srv GitServiceServer) {
	s.RegisterService(&GitService_ServiceDesc, srv)
}

func _GitService_SaveGitProvider_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GitProviderExchange)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GitServiceServer).SaveGitProvider(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/git_service.GitService/SaveGitProvider",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GitServiceServer).SaveGitProvider(ctx, req.(*GitProviderExchange))
	}
	return interceptor(ctx, in, info, handler)
}

func _GitService_AddRepo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddRepoExchange)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GitServiceServer).AddRepo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/git_service.GitService/AddRepo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GitServiceServer).AddRepo(ctx, req.(*AddRepoExchange))
	}
	return interceptor(ctx, in, info, handler)
}

func _GitService_UpdateRepo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GitMaterial)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GitServiceServer).UpdateRepo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/git_service.GitService/UpdateRepo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GitServiceServer).UpdateRepo(ctx, req.(*GitMaterial))
	}
	return interceptor(ctx, in, info, handler)
}

func _GitService_SavePipelineMaterial_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SavePipelineMaterialExchange)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GitServiceServer).SavePipelineMaterial(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/git_service.GitService/SavePipelineMaterial",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GitServiceServer).SavePipelineMaterial(ctx, req.(*SavePipelineMaterialExchange))
	}
	return interceptor(ctx, in, info, handler)
}

func _GitService_FetchChanges_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FetchScmChangesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GitServiceServer).FetchChanges(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/git_service.GitService/FetchChanges",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GitServiceServer).FetchChanges(ctx, req.(*FetchScmChangesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GitService_GetHeadForPipelineMaterials_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HeadRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GitServiceServer).GetHeadForPipelineMaterials(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/git_service.GitService/GetHeadForPipelineMaterials",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GitServiceServer).GetHeadForPipelineMaterials(ctx, req.(*HeadRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GitService_GetCommitMetadata_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CommitMetadataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GitServiceServer).GetCommitMetadata(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/git_service.GitService/GetCommitMetadata",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GitServiceServer).GetCommitMetadata(ctx, req.(*CommitMetadataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GitService_GetCommitMetadataForPipelineMaterial_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CommitMetadataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GitServiceServer).GetCommitMetadataForPipelineMaterial(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/git_service.GitService/GetCommitMetadataForPipelineMaterial",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GitServiceServer).GetCommitMetadataForPipelineMaterial(ctx, req.(*CommitMetadataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GitService_GetCommitInfoForTag_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CommitMetadataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GitServiceServer).GetCommitInfoForTag(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/git_service.GitService/GetCommitInfoForTag",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GitServiceServer).GetCommitInfoForTag(ctx, req.(*CommitMetadataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GitService_RefreshGitMaterial_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RefreshGitMaterialRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GitServiceServer).RefreshGitMaterial(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/git_service.GitService/RefreshGitMaterial",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GitServiceServer).RefreshGitMaterial(ctx, req.(*RefreshGitMaterialRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GitService_ReloadAllMaterial_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GitServiceServer).ReloadAllMaterial(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/git_service.GitService/ReloadAllMaterial",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GitServiceServer).ReloadAllMaterial(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _GitService_ReloadMaterial_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReloadMaterialRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GitServiceServer).ReloadMaterial(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/git_service.GitService/ReloadMaterial",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GitServiceServer).ReloadMaterial(ctx, req.(*ReloadMaterialRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GitService_GetChangesInRelease_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReleaseChangeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GitServiceServer).GetChangesInRelease(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/git_service.GitService/GetChangesInRelease",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GitServiceServer).GetChangesInRelease(ctx, req.(*ReleaseChangeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GitService_GetWebhookData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WebhookDataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GitServiceServer).GetWebhookData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/git_service.GitService/GetWebhookData",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GitServiceServer).GetWebhookData(ctx, req.(*WebhookDataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GitService_GetAllWebhookEventConfigForHost_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WebhookEventConfigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GitServiceServer).GetAllWebhookEventConfigForHost(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/git_service.GitService/GetAllWebhookEventConfigForHost",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GitServiceServer).GetAllWebhookEventConfigForHost(ctx, req.(*WebhookEventConfigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GitService_GetWebhookEventConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WebhookEventConfigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GitServiceServer).GetWebhookEventConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/git_service.GitService/GetWebhookEventConfig",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GitServiceServer).GetWebhookEventConfig(ctx, req.(*WebhookEventConfigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GitService_GetWebhookPayloadDataForPipelineMaterialId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WebhookPayloadDataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GitServiceServer).GetWebhookPayloadDataForPipelineMaterialId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/git_service.GitService/GetWebhookPayloadDataForPipelineMaterialId",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GitServiceServer).GetWebhookPayloadDataForPipelineMaterialId(ctx, req.(*WebhookPayloadDataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GitService_GetWebhookPayloadFilterDataForPipelineMaterialId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WebhookPayloadFilterDataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GitServiceServer).GetWebhookPayloadFilterDataForPipelineMaterialId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/git_service.GitService/GetWebhookPayloadFilterDataForPipelineMaterialId",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GitServiceServer).GetWebhookPayloadFilterDataForPipelineMaterialId(ctx, req.(*WebhookPayloadFilterDataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// GitService_ServiceDesc is the grpc.ServiceDesc for GitService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var GitService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "git_service.GitService",
	HandlerType: (*GitServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SaveGitProvider",
			Handler:    _GitService_SaveGitProvider_Handler,
		},
		{
			MethodName: "AddRepo",
			Handler:    _GitService_AddRepo_Handler,
		},
		{
			MethodName: "UpdateRepo",
			Handler:    _GitService_UpdateRepo_Handler,
		},
		{
			MethodName: "SavePipelineMaterial",
			Handler:    _GitService_SavePipelineMaterial_Handler,
		},
		{
			MethodName: "FetchChanges",
			Handler:    _GitService_FetchChanges_Handler,
		},
		{
			MethodName: "GetHeadForPipelineMaterials",
			Handler:    _GitService_GetHeadForPipelineMaterials_Handler,
		},
		{
			MethodName: "GetCommitMetadata",
			Handler:    _GitService_GetCommitMetadata_Handler,
		},
		{
			MethodName: "GetCommitMetadataForPipelineMaterial",
			Handler:    _GitService_GetCommitMetadataForPipelineMaterial_Handler,
		},
		{
			MethodName: "GetCommitInfoForTag",
			Handler:    _GitService_GetCommitInfoForTag_Handler,
		},
		{
			MethodName: "RefreshGitMaterial",
			Handler:    _GitService_RefreshGitMaterial_Handler,
		},
		{
			MethodName: "ReloadAllMaterial",
			Handler:    _GitService_ReloadAllMaterial_Handler,
		},
		{
			MethodName: "ReloadMaterial",
			Handler:    _GitService_ReloadMaterial_Handler,
		},
		{
			MethodName: "GetChangesInRelease",
			Handler:    _GitService_GetChangesInRelease_Handler,
		},
		{
			MethodName: "GetWebhookData",
			Handler:    _GitService_GetWebhookData_Handler,
		},
		{
			MethodName: "GetAllWebhookEventConfigForHost",
			Handler:    _GitService_GetAllWebhookEventConfigForHost_Handler,
		},
		{
			MethodName: "GetWebhookEventConfig",
			Handler:    _GitService_GetWebhookEventConfig_Handler,
		},
		{
			MethodName: "GetWebhookPayloadDataForPipelineMaterialId",
			Handler:    _GitService_GetWebhookPayloadDataForPipelineMaterialId_Handler,
		},
		{
			MethodName: "GetWebhookPayloadFilterDataForPipelineMaterialId",
			Handler:    _GitService_GetWebhookPayloadFilterDataForPipelineMaterialId_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "git-sensor/service.proto",
}
